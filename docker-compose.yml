name: bankingMicroservices

services:
  postgres: 
    image: bitnami/postgresql:latest
    container_name: postgres
    environment:
      POSTGRESQL_USERNAME: admin1234
      POSTGRESQL_PASSWORD: admin1234
      POSTGRES_DB: bank
    ports:
      - "5433:5432"   
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U user"]
      interval: 10s 
      timeout: 3s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis/redis-stack:6.2.6-v19
    container_name: redis
    ports:
      - "6379:6379"
      - "8001:8001"
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data

  kafka:
    image: bitnami/kafka:3.9.0
    container_name: kafka
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_KRAFT_CLUSTER_ID=CLUSTER_ID_1
      - KAFKA_CREATE_TOPICS=>
        account.created:1:1,
        account.deleted:1:1,
        user.registered:1:1,
        transaction.events:1:1
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=localCluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka     
  kafka-init:
    image: bitnami/kafka:3.9.0
    depends_on:
      - kafka
    entrypoint: [ "/bin/bash", "-c" ]
    command: |
      "
      echo 'Waiting for Kafka to be ready...' &&
      sleep 10 &&
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic account.created --replication-factor 1 --partitions 1 &&
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic account.deleted --replication-factor 1 --partitions 1 &&
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic user.registered --replication-factor 1 --partitions 1 &&
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic transaction.events --replication-factor 1 --partitions 1
      "
  bank-api-gateway:
    image: bank/api-gateway:latest
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "3000:3000"
    env_file:
      - services/api-gateway/.env  
    environment:
      - NODE_ENV=test 
    depends_on:
      redis:
        condition: service_healthy   
  bank-auth-service:
    image: bank/auth-service:latest
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    container_name: auth-service
    ports:
      - "3001:3001"
    env_file:
      - services/auth-service/.env
    environment:
      - NODE_ENV=test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      bank-api-gateway:
        condition: service_started   
  bank-account-service:
    image: bank/account-service:latest
    build:
      context: .
      dockerfile: services/account-service/Dockerfile         
    container_name: account-service
    ports:
      - "3002:3002"
    env_file:
      - services/account-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      bank-api-gateway:
        condition: service_started   

volumes:
  postgres_data:
  redis_data:

    
